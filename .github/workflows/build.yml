name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest]
        node-version: [20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Lint
      run: pnpm run lint:check

    - name: Type Check Frontend
      run: pnpm run check-types:frontend

    - name: Type Check Backend  
      run: pnpm run check-types:backend

    - name: Build TypeScript Backend
      run: pnpm run build:node

    - name: Test
      run: pnpm test
    
    - name: Clean rebuild native modules for Node.js
      run: |
        pnpm run rebuild:clean
        pnpm run rebuild:node
    
    - name: Run native module diagnostics
      run: pnpm run check:native -- --verbose
    
    - name: Test database connection
      run: node --input-type=module -e "import Database from 'better-sqlite3'; const db = new Database(':memory:'); db.exec('SELECT 1'); console.log('✅ Database test passed'); db.close();"
    
    - name: Verify better-sqlite3 build artifacts
      run: |
        echo "Checking better-sqlite3 build artifacts:"
        ls -la node_modules/better-sqlite3/build/ || echo "No build directory found"
        ls -la node_modules/better-sqlite3/prebuilds/ || echo "No prebuilds directory found"
    
    - name: Build application
      run: pnpm run build
    
    - name: Test database connection
      run: node -e "console.log('✅ Database test skipped in CI')"

  build-electron:
    needs: test
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Clean and rebuild native modules for Electron
      run: |
        pnpm run rebuild:clean
        pnpm run rebuild:electron
    
    - name: Verify Electron native modules
      run: |
        echo "Checking better-sqlite3 Electron build:"
        ls -la node_modules/better-sqlite3/build/Release/ || echo "No Release build found"
        node --version
        npx electron --version
    
    - name: Build TypeScript Backend for Electron
      run: pnpm run build:node

    - name: Build Frontend for Production
      run: pnpm run build

    - name: Build Electron app
      run: pnpm run electron:build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Verify build artifacts
      run: |
        echo "Checking release directory:"
        ls -la release/ || echo "No release directory found"
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "Windows artifacts:"
          ls -la release/*.exe || echo "No Windows executables found"
          ls -la release/*.exe.blockmap || echo "No Windows blockmap files found"
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          echo "macOS artifacts:"
          ls -la release/*.dmg || echo "No macOS DMG files found"  
          ls -la release/*.dmg.blockmap || echo "No macOS blockmap files found"
        elif [[ "$RUNNER_OS" == "Linux" ]]; then
          echo "Linux artifacts:"
          ls -la release/*.AppImage || echo "No AppImage files found"
          ls -la release/*.deb || echo "No DEB packages found"
          ls -la release/*.rpm || echo "No RPM packages found"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: electron-app-${{ matrix.os }}
        path: release/
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          release/*.exe
          release/*.exe.blockmap
          release/*.dmg
          release/*.dmg.blockmap
          release/*.AppImage
          release/*.deb
          release/*.rpm
          release/*.tar.gz
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
