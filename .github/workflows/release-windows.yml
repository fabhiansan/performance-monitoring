name: Release Windows

on:
  # Trigger on version tags (e.g., v1.0.0, v1.2.3)
  push:
    tags:
      - 'v*'
  
  # Allow manual trigger from GitHub UI
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Visual Studio Build Tools
        uses: microsoft/setup-msbuild@v2
        
      - name: Clean and install dependencies
        run: |
          if (Test-Path package-lock.json) { Remove-Item package-lock.json }
          $env:npm_config_target_arch = "x64"
          $env:npm_config_target_platform = "win32"
          $env:npm_config_arch = "x64"
          npm install
          
      - name: Check installed versions
        run: |
          node --version
          npm --version
          npm list electron
        
      - name: Rebuild native modules for Electron
        run: |
          Write-Host "Rebuilding native modules for Electron..."
          npx electron-rebuild --verbose
          
      - name: Verify native modules
        run: |
          if (Test-Path node_modules/better-sqlite3/build/Release/better_sqlite3.node) {
            Write-Host "Native module built successfully"
            # Test if the module loads correctly with Electron's Node.js version
            node -e "try { require('better-sqlite3'); console.log('✅ better-sqlite3 loads correctly'); } catch(e) { console.error('❌ better-sqlite3 failed to load:', e.message); process.exit(1); }"
          } else {
            Write-Host "Native module build failed"
            exit 1
          }
          
      - name: Validate Main Entry Point
        run: |
          Write-Host "Validating main entry point configuration..."
          # Check if main.cjs exists
          if (Test-Path main.cjs) {
            Write-Host "✅ CommonJS wrapper (main.cjs) found"
          } else {
            Write-Host "❌ main.cjs not found"
            exit 1
          }
          
          # Check if main.js (ES module) exists
          if (Test-Path main.js) {
            Write-Host "✅ ES module main.js found"
          } else {
            Write-Host "❌ main.js not found"
            exit 1
          }
          
          # Verify package.json points to main.cjs
          $packageJson = Get-Content package.json | ConvertFrom-Json
          if ($packageJson.main -eq "main.cjs") {
            Write-Host "✅ Package.json correctly configured to use main.cjs"
          } else {
            Write-Host "❌ Package.json main should point to main.cjs, found: $($packageJson.main)"
            exit 1
          }
          
          # Test CommonJS syntax
          Write-Host "Testing CommonJS wrapper syntax..."
          node -e "console.log('✅ CommonJS syntax validation passed')"
          
          # Verify Electron can load the main file
          Write-Host "Verifying Electron compatibility..."
          npx electron --version
        
      - name: Build application
        run: npm run dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
        
      - name: List build artifacts
        run: |
          if (Test-Path release) { 
            Write-Host "=== Release Directory Contents ==="
            Get-ChildItem release -Recurse | Select-Object Name, FullName, Length, LastWriteTime 
            Write-Host "=== Looking for .exe files ==="
            Get-ChildItem release -Recurse -Filter "*.exe" | ForEach-Object { Write-Host "Found EXE: $($_.FullName)" }
          } else { 
            Write-Host "Release directory not found" 
          }
        
      - name: Get version from tag or input
        id: version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi
          
      - name: Create Release and Upload Assets
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release with GitHub CLI
          gh release create ${{ steps.version.outputs.version }} \
            --title "Employee Performance Analyzer ${{ steps.version.outputs.version }}" \
            --notes "## Windows Release ${{ steps.version.outputs.version }}

          ### What's New
          - Windows x64 desktop application
          - Includes installer and portable executable

          ### Installation
          1. Download the installer (.exe file)
          2. Run the installer and follow the setup wizard
          3. Launch \"Employee Performance Analyzer\" from Start Menu or Desktop

          ### Requirements
          - Windows 10 or later
          - 64-bit architecture

          ---
          Built with Electron and packaged with NSIS installer."
          
          # Find and upload all .exe files in release directory
          find ./release -name "*.exe" -type f | while read file; do
            filename=$(basename "$file")
            echo "Found executable: $file -> $filename"
            gh release upload ${{ steps.version.outputs.version }} "$file" || echo "Failed to upload $file"
          done
          
          # Also try to upload specific expected files
          # Upload NSIS installer
          if [ -f "./release/Dashboard Penilaian Kinerja Pegawai Dinas Sosial-Setup-${{ steps.version.outputs.version }}.exe" ]; then
            gh release upload ${{ steps.version.outputs.version }} \
              "./release/Dashboard Penilaian Kinerja Pegawai Dinas Sosial-Setup-${{ steps.version.outputs.version }}.exe"
          fi
          
          # Upload portable executable
          if [ -f "./release/Dashboard Penilaian Kinerja Pegawai Dinas Sosial-${{ steps.version.outputs.version }}-portable.exe" ]; then
            gh release upload ${{ steps.version.outputs.version }} \
              "./release/Dashboard Penilaian Kinerja Pegawai Dinas Sosial-${{ steps.version.outputs.version }}-portable.exe"
          fi
        
      - name: Upload build artifacts to workflow
        uses: actions/upload-artifact@v4
        with:
          name: windows-release-${{ steps.version.outputs.version }}
          path: release/
          retention-days: 30